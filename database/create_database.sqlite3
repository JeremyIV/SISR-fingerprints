create table datasets(
    id integer primary key,
    type text, --  SISR, GM100, RAISE
    name text,
    is_test boolean,
    ordered_labels text,  -- serialized JSON array of strings such as ['x2', 'x4']
    opt text -- serialized JSON object with all data needed to recreate the dataset.
);

create table SISR_datasets(
    id integer primary key,
    dataset_id integer unique,
    label_param text, -- loss, scale, seed, arch. etc.
    test_param text, -- L1, s3, etc. Whatever value was reserved for testing.
);

create table classifiers(
    id integer primary key,
    training_dataset_id integer,
    name text,
    type text, -- PRNU, Asnani, or CNN
    opt text -- serialized json object with all the data needed to recreate the classifier. 
);


create table generators(
    id integer primary key,
    type text, -- SISR, GM100, RAISE
    name text -- this should be the same as the name of the directory in the dataset.
);

-- which generators were in the dataset?
create table generators_in_dataset(
    dataset_id integer,
    generator_id integer
)

create table SISR_generators(
    id integer primary key,
    generator_id integer unique,
    architecture text,
    dataset text,
    scale integer,
    loss text,
    seed integer);

-- all image patches in the database are cropped from the center of their respective images.
-- by the following formula:
-- crop_top = (height - 299) // 2
-- crop_bottom = crop_top + 299
-- crop_left = (width - 299) // 2
-- crop_right = crop_left + 299
create table image_patches(
    image_patch_id integer primary key,
    generator_id integer,
    image_path text,
    crop_top integer,
    crop_left integer,
    crop_bottom integer,
    crop_right integer,
    acutance float,
    psnr float,
    lpips float,
    constraint unq unique (
        generator_id,
        image_filename,
        crop_top,
        crop_left,
        crop_bottom,
        crop_right)
);

create table predictions(
    id integer primary key,
    image_patch_id integer,
    classifier_id integer,
    dataset_id integer,
    actual_label text,
    predicted_label text,
    feature blob,
    class_probabilities blob,
    constraint unq unique (
        classifier_name,
        sisr_model,
        image_name,
        crop_top,
        crop_left,
        crop_bottom,
        crop_right)
);

## views

# analysis, joins together all these tables. same cardinality as predictions.